/*
@name: Prefixed transition
@values: Variable values
@example:
  @include transition(transform);
*/

@mixin transition($properties...) {
  -webkit-transition: $properties;
  -moz-transition: $properties;
  -ms-transition: $properties;
  -o-transition: $properties;
  transition: $properties;
}

/*
@name: Prefixed transform
@values: Variable values
@example:
  @include transform(translateX(10px));
*/

@mixin transform($properties...) {
  -webkit-transform: $properties;
  -moz-transform: $properties;
  -ms-transform: $properties;
  -o-transform: $properties;
  transform: $properties;
}

/*
@name: Prefixed transform-origin
@values: Variable values
@example:
  @include transform(translateX(10px));
*/

@mixin transform-origin($properties...) {
  -webkit-transform-origin: $properties;
  -moz-transform-origin: $properties;
  -ms-transform-origin: $properties;
  -o-transform-origin: $properties;
  transform-origin: $properties;
}

/*
@name: Prefixed box-shadow
@values: Variable values
@example:
  @include box-shadow(0 1px 0 0 #ccddcc);
*/

@mixin box-shadow($properties...) {
  -webkit-box-shadow: $properties;
  -moz-box-shadow: $properties;
  box-shadow: $properties;
}

/*
@name: Prefixed box-sizing
@values: Any value that box-sizing accepts
@example:
  @include box-sizing(border-box);
*/

@mixin box-sizing($properties) {
  -webkit-box-sizing: $properties;
  -moz-box-sizing: $properties;
  box-sizing: $properties;
}

/*
@name: Prefixed input placeholder
@values: Variable content
@example:
  @include placeholder {
    content ...;
  };
*/

@mixin placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

/*
@name: Prefixed appearance
@values: Any value accepted by Appearance;
@example:
  @include appearance(none);
*/

@mixin appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

/*
@name: Prefixed keyframes
@values: name, content;
@example:
  @include keyframes(fadeOut) {
    0%   { left: 0; }
    100% { left: 100px; }
  }
*/

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

/*
@name: Prefixed animation
@values: Animation name;
@example:
  @include animation(fadeOut);
*/

@mixin animation($name...) {
  -webkit-animation: $name;
  -moz-animation: $name;
  -ms-animation: $name;
  -o-animation: $name;
  animation: $name;
}

/*
@name: Prefixed border-radius
@values: Any values border-radius accepts;
@example:
  @include border-radius(2px);
*/

@mixin border-radius($values...) {
  -webkit-border-radius: $values;
  -moz-border-radius: $values;
  -ms-border-radius: $values;
  border-radius: $values;
}

/*
@name: Prefixed opacity
@values: Non-hex numerical value;
@example:
  @include opacity(0.5);
*/

@mixin opacity($value) {
  $percentage: ($value * 100);

  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$percentage}";
  filter: alpha(opacity=$percentage);
}

/*
@name: Linear gradients
@param: string Direction
        var Color stops
@example:
  @include linear-gradient("to top", #000, #eee);
*/

@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(
    legacy-direction($direction),
    $color-stops
  );
  background: linear-gradient($direction, $color-stops);
}

/*
@name: Fetch easing type
@param: var EaseType
@example:
  ease('fluid');
*/

@function ease($easetype) {
  $easing: (
    "easeInOutQuint": cubic-bezier(0.83, 0, 0.17, 1),
    "fluid": cubic-bezier(0.3, 0, 0.22, 1),
    "normal": cubic-bezier(0.25, 0.1, 0.25, 0.1),
  );

  @if map-has-key($easing, $easetype) == false {
    @error 'Invalid ease type: `#{$easetype}`';
  }

  @return map-get($easing, $easetype);
}

/*
@name: Retina query
@param: Content
@example:
  @include retina {
    content ...;
  }
*/

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
    only screen and (-moz-min-device-pixel-ratio: 1.5),
    only screen and (-o-min-device-pixel-ratio: 3 / 2),
    only screen and (min-device-pixel-ratio: 1.5),
    only screen and (min-resolution: 1.5dppx) {
    @content;
  }
}

/*
@name: Font-face
@param: string Name
        string Path
        int Weight
        var Style
        string Exts
@example:
  @include font-face(SuperSans, "path/to/font", $weight: normal, $style: normal, ttf);
*/

@mixin font-face(
  $name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg
) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_"),
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype",
  );

  @each $ext in $exts {
    $extmod: if(
      map-has-key($extmods, $ext),
      $ext + map-get($extmods, $ext),
      $ext
    );
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + "." + $extmod)) format(quote($format)),
      comma
    );
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    font-display: fallback;
    src: $src;
  }
}

/*
@name: Helper functions
*/
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top: bottom,
    to top right: bottom left,
    to right top: left bottom,
    to right: left,
    to bottom right: top left,
    to right bottom: left top,
    to bottom: top,
    to bottom left: top right,
    to left bottom: right top,
    to left: right,
    to left top: right bottom,
    to top left: bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@function is-direction($value) {
  $is-keyword: index(
    (
      to top,
      to top right,
      to right top,
      to right,
      to bottom right,
      to right bottom,
      to bottom,
      to bottom left,
      to left bottom,
      to left,
      to left top,
      to top left
    ),
    $value
  );
  $is-angle: type-of($value) == "number" and
    index("deg" "grad" "turn" "rad", unit($value));
  @return $is-keyword or $is-angle;
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    "top": "bottom",
    "right": "left",
    "bottom": "top",
    "left": "right",
    "center": "center",
    "ltr": "rtl",
    "rtl": "ltr",
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append(
        $opposite-directions,
        unquote(map-get($direction-map, $direction))
      );
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
